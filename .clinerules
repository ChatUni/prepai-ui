{
  "rules": [
    {
      "name": "no-alert-usage",
      "description": "Never use alert() for user notifications. Always use openErrorDialog() for error messages and openInfoDialog() for informational messages. These methods are available in stores that extend PageStore or have dialog functionality.",
      "severity": "error",
      "category": "user-interface"
    },
    {
      "name": "use-mobx-for-state",
      "description": "Never put any state inside a React component using useState. All states, derived states, and related actions should be in MobX stores.",
      "severity": "error",
      "category": "state-management"
    },
    {
      "name": "pure-components-only",
      "description": "All components must be pure components. Absolutely no states and derived/computed states are allowed in components. The only type of effect allowed in components are UI/animation effects.",
      "severity": "error",
      "category": "component-architecture"
    },
    {
      "name": "route-params-in-stores",
      "description": "Route parameters must be handled by stores, not components. Components should never extract or parse route parameters directly. Instead, a dedicated store should synchronize with route parameters and provide all derived state through computed properties. Components should be agnostic to whether data comes from route parameters, API calls, or other sources.",
      "severity": "error",
      "category": "routing"
    },
    {
      "name": "constants-outside-components",
      "description": "Constants like routeMap, lookup tables, and mapping objects must be defined outside of components at the module level. These should never be defined inside components where they would be recreated on every render. This includes but is not limited to: route mappings, action mappings, status mappings, and any other constant key-value pairs used for lookups or transformations.",
      "severity": "error",
      "category": "routing"
    },
    {
      "name": "derived-state-in-stores",
      "description": "No computed, calculated, or derived values are allowed in components. All such values must be computed in MobX stores using computed properties. This includes but is not limited to: filtered/sorted lists, existence checks, transformations, aggregations, calculations, data mappings, array/object manipulations, string formatting, and any other values derived from primary state. Components must be pure render functions that only consume pre-computed values from stores via MobX's computed properties, ensuring clean separation of concerns and optimized rendering.",
      "severity": "error",
      "category": "state-management"
    },
    {
      "name": "prefer-arrow-functions",
      "description": "Use arrow functions instead of regular function declarations or expressions. If a function contains only one statement, write it as a concise arrow function without curly braces and return keyword.",
      "severity": "error",
      "category": "code-style"
    },
    {
      "name": "no-mock-data",
      "description": "Never create or use mock data in the application. Always fetch and use real data from the database. This ensures consistency between development and production environments and prevents discrepancies in behavior.",
      "severity": "error",
      "category": "data-management"
    },
    {
      "name": "no-prop-types",
      "description": "Never use PropTypes for type checking in React components. Type checking should be handled by TypeScript or similar static type checking tools.",
      "severity": "error",
      "category": "code-style"
    },
    {
      "name": "use-react-icons",
      "description": "Never use inline SVG icons in components. Always use react-icons library for icons. This ensures consistency in icon usage across the application and reduces code complexity.",
      "severity": "error",
      "category": "code-style"
    },
    {
      "name": "maintain-all-translations",
      "description": "When adding or modifying any resource or text in one language, it must be added or modified for all supported languages (en, ja, zh). This ensures consistent user experience across all language settings and prevents missing translations.",
      "severity": "error",
      "category": "internationalization"
    },
    {
      "name": "no-duplicate-code",
      "description": "Do not duplicate code patterns or UI structures. Create reusable components for repeated patterns, especially in UI elements like buttons, forms, cards, or layout structures. This includes extracting common styling, behavior, and markup into dedicated components. Components should be modular, accepting props for customization while maintaining consistent base functionality and appearance.",
      "severity": "error",
      "category": "component-architecture"
    },
    {
      "name": "no-repetitive-control-flow",
      "description": "Avoid repetitive switch statements or if-else chains that perform similar actions with different values. Instead, use mapping objects or lookup tables to directly map inputs to outputs. This reduces code duplication, improves maintainability, and makes the code more declarative. For example, instead of a switch statement that maps actions to routes, use a routeMap object.",
      "severity": "error",
      "category": "code-style"
    },
    {
      "name": "use-save-endpoint",
      "description": "All database changes must be saved by calling POST /api/save?doc={document name} with the complete object. Direct database modifications or partial updates are not allowed. This ensures data consistency and maintains a single source of truth for database operations.",
      "severity": "error",
      "category": "data-management"
    },
    {
      "name": "check-existing-components",
      "description": "Before creating new components, especially UI components, always check the existing components under the components/ui folder first. When adding components of the same kind (e.g., buttons with similar styles), use existing reusable components and avoid duplicating code. This applies particularly to components that share similar structure, styling, or behavior but differ only in minor aspects like color schemes or content.",
      "severity": "error",
      "category": "component-architecture"
    },
    {
      "name": "optimize-ternary-operators",
      "description": "Ternary operators should only be used on the differences between two branches, not on repeated parts. For example, instead of `isHidden ? t('series.show') : t('series.hide')`, use `t(`series.${isHidden ? 'show' : 'hide'}`)`. This reduces code duplication and improves maintainability by isolating the varying parts.",
      "severity": "error",
      "category": "code-style"
    },
    {
      "name": "preserve-existing-translations",
      "description": "When adding new translations, always preserve existing translation entries. First read the existing translation file, then merge new translations with the existing ones. Never replace the entire translation file with just the new entries.",
      "severity": "error",
      "category": "internationalization"
    },
    {
      "name": "no-readme-files",
      "description": "Never create README.md files or any other documentation files with .md extension. Documentation should be maintained through code comments and inline documentation only.",
      "severity": "error",
      "category": "documentation"
    },
    {
      "name": "use-t-import-pattern",
      "description": "When using languageStore for translations, always import the t function directly using `import { t } from './languageStore';` and then use `t('key')` instead of `languageStore.t('key')`. This provides a cleaner and more consistent API for internationalization throughout the application.",
      "severity": "error",
      "category": "internationalization"
    },
    {
      "name": "no-makeobservable-in-merged-stores",
      "description": "If a store only exports the class (not an instance), it means the store instance will be created elsewhere and merged with other stores using combineStores. The combineStores function calls makeObservable after the merge, so never add a constructor with makeObservable/makeAutoObservable to these stores. Only stores that export instances should have their own MobX decorations.",
      "severity": "error",
      "category": "state-management"
    },
    {
      "name": "no-fallback-data",
      "description": "Always use data fetched from database or API. If the result is empty, then it should remain empty. Never provide fake fallback data, mock data, or default data when real data is not available. This ensures data integrity and prevents inconsistencies between development and production environments.",
      "severity": "error",
      "category": "data-management"
    },
    {
      "name": "inline-simple-handlers",
      "description": "In components, if a handler only has one line (e.g., calls a method on the store), do not define separate handler functions. Instead, use inline arrow functions directly in the JSX. If a handler contains more than one line of code, then the handler should be created in the store, not in the component. This keeps components pure and moves complex logic to stores where it belongs.",
      "severity": "error",
      "category": "component-architecture"
    },
    {
      "name": "no-test-execution",
      "description": "Do not run tests after finishing a task. Tests should be executed separately by the user when needed. This prevents unnecessary test execution and allows the user to control when tests are run.",
      "severity": "error",
      "category": "workflow"
    },
    {
      "name": "no-dark-mode",
      "description": "Never use dark mode styling in components. Always use light theme with appropriate colors like white backgrounds, gray text colors, and proper contrast. Avoid dark backgrounds (bg-gray-800, bg-black, etc.) and light text colors (text-white, text-gray-100, etc.). Use light backgrounds and dark text for better readability and consistency.",
      "severity": "error",
      "category": "user-interface"
    }
  ]
}
